import java.util.*;

public class Main {
    public static int getfork1(String str , int k){
        int ans = 0;
        
        HashMap<Character , Integer> map = new HashMap<>();
        
        int i = -1;
        int j = -1;
        
        while(true){
            boolean l1 = false;
            boolean l2 = false;
            
            while(i < str.length() - 1){
                l1= true;
                i++;
                char ch = str.charAt(i);
                map.put(ch , map.getOrDefault(ch , 0) + 1);
                
                if(map.size() == 2){
                    remove(map , ch);
                    i--;
                    break;
                }
                
            }
            while(j < i){
                l2 = true;
                if(map.size() == 1){
                   ans += i - j;
                }
                
                j++;
                
               char ch = str.charAt(j);
               remove(map , ch);
                
                
                if(map.size() == 0){
                    break;
                }
            }
            
            if(l1 == false && l2 == false){
                break;
            }
            
        }
        return ans;
    }
	public static int solution(String str, int k){
		// write your code here
		
		if(k == 1){
		    return getfork1(str , k);
		}
		
		int ans = 0;
		
		HashMap<Character , Integer> mapb = new HashMap<>();
		
		HashMap<Character , Integer> maps = new HashMap<>();
		
		int ib = -1;
		int is = -1;
		int j = -1;
		
		while(true){
		    boolean f1 = false;
		    boolean f2 = false;
		    boolean f3 = false;
		    
		    while(ib < str.length() - 1){
		        f1 = true;
		        
		        ib++;
		        
		        char ch = str.charAt(ib);
		        mapb.put(ch , mapb.getOrDefault(ch , 0) + 1);
		        
		        if(mapb.size() == k + 1){
		            remove(mapb , ch);
		            ib--;
		            break;
		        }
		        
		    }
		    
		    while(is < ib){
		        f2 = true;
		        is++;
		        char ch = str.charAt(is);
		        maps.put(ch , maps.getOrDefault(ch , 0) + 1);
		        
		        if(maps.size() == k){
		            remove(maps , ch);
		            is--;
		            break;
		        }
		    }
		    
		    while(j < is){
		        f3 = true;
		        j++;
		        if(mapb.size() == k && maps.size() == k - 1){
		            ans += ib - is;
		        }
		        
		        char ch = str.charAt(j);
		        remove(mapb , ch);
		        remove(maps , ch);
		        
		        if(mapb.size() < k || maps.size() < k - 1){
		            break;
		        }
		        
		    }
		    
		    if(f1 == false && f2 == false && f3 == false){
		        break;
		    }
		    
		}
		
		return ans;
	}
	public static void remove(HashMap<Character , Integer > map , char ch){
	    if(map.get(ch) == 1){
	        map.remove(ch);
	    }else{
	        map.put(ch , map.get(ch) - 1);
	    }
	}
	
	public static void main(String[] args) {
		Scanner scn = new Scanner(System.in);
        String str = scn.next();
        int k = scn.nextInt();
		System.out.println(solution(str,k));
	}

}
