import java.util.*;
import java.io.*;
public class Main{
    static class HashMap < K ,V> {
        
        class HMNode{
            K key;
            V value;
            HMNode(K key , V value){
                this.key = key;
                this.value = value;
            }
        }
        
        private int size;
        private LinkedList<HMNode>[] bucket;
        
        public HashMap(){
            initbuckets(4);
            size = 0;
        }
        
        private void initbuckets(int N) {
           bucket = new LinkedList[N];
           for (int bi = 0; bi < bucket.length; bi++) {
                bucket[bi] = new LinkedList<>();
            }
        }
    
        public void put(K key , V value)  {
            int bi = hashFunction(key);
            int di = getdataindex(key , bi);
            
            if(di != -1){
                HMNode node = bucket[bi].get(di);
                node.value = value;
            }else{
                HMNode node = new HMNode(key , value);
                bucket[bi].add(node);
                size++;
            }
            
            double lambda = size * 1.0 / bucket.length;
            if(lambda > 2.0){
                rehashing();
            }
            
        }
        
        public void rehashing(){
            LinkedList<HMNode>[] oldbucket = bucket;
            
            initbuckets(oldbucket.length * 2);
            size = 0;
            
            for(int i = 0 ; i < oldbucket.length ; i++){
                for(HMNode node : oldbucket[i]){
                    put(node.key , node.value);
                }
            }
            
        }
        
        public int hashFunction(K key){
            int hcode = key.hashCode();
            return Math.abs(hcode) % bucket.length;
        }
        
        public int getdataindex(K key  , int bi){
            int di = 0;
            for(HMNode node : bucket[bi]){
                if(node.key.equals(key)){
                    return di;
                }
                di++;
            }
            return -1;
        }
        
        public V get(K key) throws Exception {
            int bi = hashFunction(key);
            int di = getdataindex(key , bi);
            
            if(di != -1){
                HMNode node = bucket[bi].get(di);
                return node.value;
            }else{
               return null;
            }
        }
        
        public V remove(K key) throws Exception {
            int bi = hashFunction(key);
            int di = getdataindex(key , bi);
            
            if(di != -1){
                HMNode node = bucket[bi].remove(di);
                size--;
                return node.value;
            }else{
               return null;
            }
            
        }
        
        public int size() throws Exception {
            return size;
        }
        
        public ArrayList<K> keyset() throws Exception {
            ArrayList<K> keys = new ArrayList<>();
            for(int bi = 0 ; bi < bucket.length ; bi++){
                for(HMNode node : bucket[bi]){
                    keys.add(node.key);
                }
            }
            return keys;
        }
        
        public boolean containsKey(K key){
            int bi = hashFunction(key);
            int di = getdataindex(key , bi);
            
            if(di != -1){
               return true;
            }else{
               return false;
            }
        }
        
        public void display() {
            System.out.println("Display Begins");
            for (int bi = 0; bi < bucket.length; bi++) {
                System.out.print("Bucket" + bi + " ");
            for (HMNode node : bucket[bi]) {
                System.out.print( node.key + "@" + node.value + " ");
                }
                System.out.println(".");
            }
                System.out.println("Display Ends");
        }
        
    }
public static void main(String[] args) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    HashMap<String, Integer> map = new HashMap();

    String str = br.readLine();
    while (str.equals("quit") == false) {
      if (str.startsWith("put")) {
        String[] parts = str.split(" ");
        String key = parts[1];
        Integer val = Integer.parseInt(parts[2]);
        map.put(key, val);
      } else if (str.startsWith("get")) {
        String[] parts = str.split(" ");
        String key = parts[1];
        System.out.println(map.get(key));
      } else if (str.startsWith("containsKey")) {
        String[] parts = str.split(" ");
        String key = parts[1];
        System.out.println(map.containsKey(key));
      } else if (str.startsWith("remove")) {
        String[] parts = str.split(" ");
        String key = parts[1];
        System.out.println(map.remove(key));
      } else if (str.startsWith("size")) {
        System.out.println(map.size());
      } else if (str.startsWith("keyset")) {
        System.out.println(map.keyset());
      } else if (str.startsWith("display")) {
        map.display();
      }
      str = br.readLine();
    }
    }
}
